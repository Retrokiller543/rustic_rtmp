
name: Test and Publish

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  REGISTRY1: ghcr.io
  REGISTRY2: docker.io
  CARGO_TERM_COLOR: always
  IMAGE_NAME: "rustic_rtmp"
  CURRENT_VERSION: ${{secrets.VERSION}}
  NEW_VERSION: ""

jobs:
  build_and_test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Cache cargo registry
      uses: actions/cache@v2
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-registry-

    - name: Cache cargo index
      uses: actions/cache@v2
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-git-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-git-

    - name: Cache cargo build
      uses: actions/cache@v2
      with:
        path: target
        key: ${{ runner.os }}-cargo-target-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-target-

    - name: Build
      run: cargo build --release

    - name: Run tests
      run: cargo test

    - name: Install dependencies
      run: sudo apt-get install -y jq openssl
    
    - name: Set execute permissions for script
      run: chmod +x ./increment_version.sh
    
    - name: Increment version
      id: increment_version
      run: echo "::set-output name=version::$(./increment_version.sh)"
    
    - name: Update CURRENT_TAG secret
      run: |
        curl -X PUT \
        -H "Authorization: token ${{ secrets.GH_PAT }}" \
        -H "Content-Type: application/json" \
        -d '{"encrypted_value":"$(echo -n "$NEW_TAG" | openssl rsautl -encrypt -pubin -inkey <(curl -s -H "Authorization: token ${{ secrets.GH_PAT }}" https://api.github.com/repos/${{github.repository}}/actions/secrets/CURRENT_TAG/public-key | jq -r '.key') | base64)","key_id":"$(curl -s -H "Authorization: token ${{ secrets.GH_PAT }}" https://api.github.com/repos/${{github.repository}}/actions/secrets/CURRENT_TAG/public-key | jq -r '.key_id')"}' \
        https://api.github.com/repos/${{github.repository}}/actions/secrets/CURRENT_TAG
      env:
        NEW_TAG: ${{ steps.increment_version.outputs.version }}

    - name: Display new version
      run: echo "The new version is ${{ env.NEW_VERSION }}"
      

  docker_build_and_push:
    needs: build_and_test
    runs-on: ubuntu-latest
  
    steps:
    - uses: actions/checkout@v3
  
    - name: Log into GitHub registry
      uses: docker/login-action@28218f9b04b4f3f62068d7b6ce6ca5b26e35336c
      with:
        registry: ${{ env.REGISTRY1 }}
        username: ${{ github.actor }}
        password: ${{ secrets.SUPER_SECRET_TOKEN }}
  
    - name: Log into Docker Hub
      uses: docker/login-action@28218f9b04b4f3f62068d7b6ce6ca5b26e35336c
      with:
        registry: ${{ env.REGISTRY2 }}
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
  
    - name: Setup Docker buildx with a different driver
      run: |
        docker buildx create --use --name mybuilder --driver docker-container
        docker buildx inspect mybuilder --bootstrap
    
    - name: Build and push to Docker Hub
      uses: docker/build-push-action@ac9327eae2b366085ac7f6a2d02df8aa8ead720a
      with:
        context: .
        push: true
        tags: ${{ env.REGISTRY2 }}/${{secrets.DOCKERHUB_USERNAME}}/${{ env.IMAGE_NAME }}:${{ env.NEW_VERSION }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        builder: mybuilder
  
    - name: Build and push to GitHub registry
      uses: docker/build-push-action@ac9327eae2b366085ac7f6a2d02df8aa8ead720a
      with:
        context: .
        push: true
        tags: ${{ env.REGISTRY1 }}/${{github.actor}}/${{ env.IMAGE_NAME }}:${{ env.NEW_VERSION }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        builder: mybuilder

  publish_github_release:
    needs: docker_build_and_push
    runs-on: ubuntu-latest
  
    steps:
    - uses: actions/checkout@v3
  
    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: nightly
        override: true
  
    - name: Build Rust binary
      run: cargo build --release
  
    - uses: "marvinpinto/action-automatic-releases@latest"
      with:
        repo_token: "${{ secrets.GITHUB_TOKEN }}"
        automatic_release_tag: "latest"
        prerelease: true
        files: |
          LICENSE.txt
          target/release/rustic_rtmp